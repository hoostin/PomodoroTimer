{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\week7\\\\qualified\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimerSection.jsx\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nexport default function TimerSection({\n  timerObject,\n  setTimerObject,\n  isTimerRunning\n}) {\n  switch (timerObject.state) {\n    case \"stop\":\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 17\n        }\n      });\n      break;\n\n    case \"focus\":\n      if (isTimerRunning) {\n        let width = 1 - timerObject.focusSeconds / (timerObject.focusDuration * 60);\n        width = width * 100;\n        console.log(width);\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row mb-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"h2\", {\n          \"data-testid\": \"session-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }\n        }, \"Focusing for \", minutesToDuration(timerObject.focusDuration), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"lead\",\n          \"data-testid\": \"session-sub-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 22\n          }\n        }, secondsToDuration(timerObject.focusSeconds), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row mb-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"progress\",\n          style: {\n            height: \"20px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"progress-bar\",\n          role: \"progressbar\",\n          \"aria-valuemin\": \"0\",\n          \"aria-valuemax\": \"100\",\n          \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n          ,\n          style: {\n            width: `${width}%`\n          } // TODO: Increase width % as elapsed time increases\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 23\n          }\n        })))));\n      }\n\n      break;\n\n    case \"break\":\n      if (isTimerRunning) {\n        let width = 1 - timerObject.breakSeconds / (timerObject.breakDuration * 60);\n        width = width * 100;\n        console.log(width);\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row mb-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"h2\", {\n          \"data-testid\": \"session-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }\n        }, \"Break for \", minutesToDuration(timerObject.breakDuration), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"lead\",\n          \"data-testid\": \"session-sub-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 26\n          }\n        }, secondsToDuration(timerObject.breakSeconds), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row mb-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"progress\",\n          style: {\n            height: \"20px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"progress-bar\",\n          role: \"progressbar\",\n          \"aria-valuemin\": \"0\",\n          \"aria-valuemax\": \"100\",\n          \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n          ,\n          style: {\n            width: `${width}%`\n          } // TODO: Increase width % as elapsed time increases\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 27\n          }\n        })))));\n      }\n\n  }\n}","map":{"version":3,"sources":["D:/Thinkful/week7/qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerSection.jsx"],"names":["React","useState","minutesToDuration","secondsToDuration","TimerSection","timerObject","setTimerObject","isTimerRunning","state","width","focusSeconds","focusDuration","console","log","height","breakSeconds","breakDuration"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nexport default function TimerSection ({timerObject, setTimerObject,isTimerRunning})\r\n{\r\n    switch(timerObject.state)\r\n    {\r\n        case \"stop\":\r\n            return (\r\n                <div></div>\r\n            )\r\n            break;\r\n        case \"focus\":\r\n            if(isTimerRunning)\r\n            {\r\n            let width = 1-((timerObject.focusSeconds)/(timerObject.focusDuration*60));\r\n            width = width*100;\r\n            console.log(width)\r\n            return (\r\n                <div>\r\n                    {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n                    <div className=\"row mb-2\">\r\n                        <div className=\"col\">\r\n                        {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n                        <h2 data-testid=\"session-title\">\r\n                         Focusing for {minutesToDuration(timerObject.focusDuration)} minutes\r\n                        </h2>\r\n                        {/* TODO: Update message below to include time remaining in the current session */}\r\n                     <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                      {secondsToDuration(timerObject.focusSeconds)} remaining\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row mb-2\">\r\n                  <div className=\"col\">\r\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                      <div\r\n                        className=\"progress-bar\"\r\n                        role=\"progressbar\"\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\r\n                        style={{ width: `${width}%` }} // TODO: Increase width % as elapsed time increases\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )\r\n            }\r\n            break;\r\n            case \"break\":\r\n                if(isTimerRunning)\r\n                {\r\n                let width = 1-((timerObject.breakSeconds)/(timerObject.breakDuration*60));\r\n                width = width*100;\r\n                console.log(width)\r\n                return (\r\n                    <div>\r\n                        {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n                        <div className=\"row mb-2\">\r\n                            <div className=\"col\">\r\n                            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n                            <h2 data-testid=\"session-title\">\r\n                            Break for {minutesToDuration(timerObject.breakDuration)} minutes\r\n                            </h2>\r\n                            {/* TODO: Update message below to include time remaining in the current session */}\r\n                         <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                          {secondsToDuration(timerObject.breakSeconds)} remaining\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row mb-2\">\r\n                      <div className=\"col\">\r\n                        <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                          <div\r\n                            className=\"progress-bar\"\r\n                            role=\"progressbar\"\r\n                            aria-valuemin=\"0\"\r\n                            aria-valuemax=\"100\"\r\n                            aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\r\n                            style={{ width: `${width}%` }} // TODO: Increase width % as elapsed time increases\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n                }  \r\n        }\r\n    \r\n   \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}